//Problem Statement
//For a matrix of dimension (N X M) all elements are 0 except at (x,y)
//You can move in any four direction so find the minimum count required to make all element as 1.

#include <iostream>
#include<bits/stdc++.h>

using namespace std;

int mat_fill(vector<vector<int> > &v,int N,int M,int x,int y)
{
    static int count=-1;
    int flag1=0,flag2=0,flag3=0,flag4=0;
    //First make all neighbours as 1
    if(x-1>=0 && v[x-1][y]==0)
    {
        flag1=1;
        v[x-1][y]=1;
        
    }
    if(x+1<=N && v[x+1][y]==0)
    {
        flag2=1;
        v[x+1][y]=1;
    }
    if(y-1>=0 && v[x][y-1]==0)
    {
        flag3=1;
        v[x][y-1]=1;
    }
    if(y+1<=M && v[x][y+1]==0)
    {
        flag4=1;
        v[x][y+1]=1;
    }
//Reach to one of the neighbour to make recursive call...................
    if(flag1)
    {

        mat_fill(v,N,M,x-1,y);
    }
    if(flag2)
    {

        mat_fill(v,N,M,x+1,y);
    }
    if(flag3)
    {

        mat_fill(v,N,M,x,y-1);
    }
    if(flag4)
    {

        mat_fill(v,N,M,x,y+1);
    }
    //if any of the call is made from here increment the count.
    if(flag1||flag2 ||flag3 ||flag4)
    count++;
    return count;
    
}


int main()
{
    int N,M,x,y;
    cin>>N>>M>>x>>y;
    
    vector<vector<int>> v(N,vector<int>(M,0));
    v[x-1][y-1]=1;
    int count=0;
    cout<<mat_fill(v,N-1,M-1,x-1,y-1);
    //cout<<count;
    return 0;
}

